Timer unit: 1e-06 s

Total time: 0 s
File: ./src/window_detection/detector.py
Function: _tibia_window_detect at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def _tibia_window_detect(toprocess: MatLike, tolerance=10, offset=10) -> MatLike:
    36                                               """
    37                                               detect tibia game window theme color and
    38                                               detect widgets
    39                                               Returns:-
    40                                                   GrayScaled Image with detected part as white and other black
    41                                               """
    42                                               b = toprocess[:, :, 0]
    43                                               g = toprocess[:, :, 1]
    44                                               r = toprocess[:, :, 2]
    45                                           
    46                                               """
    47                                                   choose value of only those pixel r,g,b 
    48                                                       such that:-
    49                                                           if 
    50                                                               tolerance-offset <= r <= tolerance+offset &
    51                                                               tolerance-offset <= g <= tolerance+offset &
    52                                                               tolerance-offset <= b <= tolerance+offset &:
    53                                                               choose_this_pixels 
    54                                                   here I am basically generating mask of it
    55                                               """
    56                                               tibia_window = (
    57                                                   (r <= tolerance + offset)  # type:ignore
    58                                                   & (tolerance - offset <= r)  # type:ignore
    59                                                   & (g <= tolerance + offset)  # type:ignore
    60                                                   & (tolerance - offset <= g)  # type:ignore
    61                                                   & (b <= tolerance + offset)  # type:ignore
    62                                                   & (tolerance - offset <= b)  # type:ignore
    63                                               )
    64                                               threshold = 10
    65                                               """
    66                                               mask out the unnecessary pixels with black color
    67                                               """
    68                                               # TODO: It is taking up most of the time [65%] need to speed this line up
    69                                               toprocess[~tibia_window] = [0, 0, 0]
    70                                               """
    71                                               if each pixel's individual color value are smaller than threadhold then
    72                                               make them white other wise keep them whites
    73                                               """
    74                                               value = 255
    75                                               _, b = cv2.threshold(b, threshold, value, cv2.THRESH_BINARY)
    76                                               _, g = cv2.threshold(g, threshold, value, cv2.THRESH_BINARY)
    77                                               _, r = cv2.threshold(r, threshold, value, cv2.THRESH_BINARY)
    78                                               toprocess = cv2.merge((b, g, r))
    79                                               toprocess = cv2.cvtColor(toprocess, cv2.COLOR_BGR2GRAY)
    80                                               return toprocess

Total time: 0.00218537 s
File: ./src/window_detection/detector.py
Function: tibia_window_detect at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def tibia_window_detect(toprocess: MatLike, tolerance=10, offset=10) -> MatLike:
    85         1          1.7      1.7      0.1      l = tolerance - offset
    86         1          0.8      0.8      0.0      r = tolerance + offset
    87         1       2182.9   2182.9     99.9      return cv2.inRange(toprocess, (l, l, l), (r, r, r), None)

Total time: 0.006445 s
File: ./src/window_detection/detector.py
Function: find_rectangle at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def find_rectangle(grayed_img: MatLike, colored_base: MatLike, i: int = 0):
   117                                               # imshow("a", grayed_img)
   118         1        276.1    276.1      4.3      _colored_base = colored_base.copy()
   119         1       4531.1   4531.1     70.3      contours, _ = cv2.findContours(grayed_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
   120       971        271.9      0.3      4.2      for contour in contours:
   121       970        888.8      0.9     13.8          area = cv2.contourArea(contour)
   122       970        331.3      0.3      5.1          if area > 500:
   123         6         17.1      2.9      0.3              x, y, w, h = cv2.boundingRect(contour)
   124         6        128.6     21.4      2.0              cv2.rectangle(_colored_base, (x, y), (x + w, y + h), (0, 255, 0), 2)
   125                                               # cv2.imwrite(f"img_dumps/{i}.png", _colored_base)
   126                                               # imshow("awd", _colored_base)

